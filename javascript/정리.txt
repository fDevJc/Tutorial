<<<<<<<<<<2021.01.25 (월)>
###Java Script
6. Object , Class 

class
-template
-declare once
-no data in

Object
-instance of a class
-created many times
-data in

클래스 정의 및 오브젝트 생성
class Person{
    //constructor
    constructor(name,age){
        //field
        this.name = name;
        this.age = age;
    }

    //method
    speak(){
        console.log(`${this.name}: hello!!`);
    }
}

const jc = new Person("jc",30);

console.log(jc.name);
console.log(jc.age);

jc.speak();

게터 세터 

class User{
    constructor(firstName, lastName , age){
        this.firstName = firstName;
        this.lastName = lastName;
        this.age = age;
    }

    get age(){
        return this._age;
    }

    set age(value){
        
        this._age = value < 0 ? 0 : value;
    }
}

const user1 = new User("Steve","Job",-1) //실수로 -1으로 설정

console.log(user1.age);

퍼블릭 프라이빗 - 나온지 얼마안되서 아직 많이 안씀
class Experiment{
    publicField = 2;
    #privateField = 0; //private field 최근에 추가된것
}

static 클래스에 공통적으로 쓸때
class Article{
    static publisher = 'Dream Coding'
}


const article1 = new Article();
const article2 = new Article();

console.log(article1.publisher);//undefined

console.log(Article.publisher);//Dream Coding

//상속과 다양성

class Shape{
    constructor(width,height,color){
        this.width = width;
        this.height = height;
        this.color = color;
    }

    draw(){
        console.log(`draw ${this.color}`);
    }

    getArea(){
        return this.width * this.height;
    }
}

class Rectangle extends Shape{}
class Triangle extends Shape{
    draw(){
        super.draw();//부모의 메서드 호출
        console.log("tri")
    }
    //오버라이딩
    getArea(){
        return this.width * this.height / 2
    }
}

const rect = new Rectangle(10,20,"black");
const tri = new Triangle(10,20,"blue")


rect.draw();

//
tri.draw();

console.log(rect.getArea());
console.log(tri.getArea());

//instanceof

<<<<<<<<<<2021.01.30 (토)>
json(javascript object notation)
-simple data interchange format
-lightweight text-based structure
-easy to read
-key-value pairs
-used for serialization and transmission of data between the network the network connection
-independent programming language and platform


http(hypertext transfer protocol)
client <-> server

'use strict';

//1.Object to JSON
//stringfy(obj)

let json = JSON.stringify(true)

json = JSON.stringify(["apple","banana"])

console.log(json);

const rabbit = {
    name: 'tori1',
    color: 'white',
    size: null,
    birthday: new Date(),
    jump: () => {
        console.log(`${this.name} can jump!`)
    }
};

json = JSON.stringify(rabbit);

console.log(json);
//함수는 데이터가 아니기때문에 JSON변경 되지않음
json = JSON.stringify(rabbit,['name','color']);
console.log(json);
console.clear();

json = JSON.stringify(rabbit,(key, value) => {
    console.log(`key : ${key} , value: ${value}`);
    return key === "name" ? "jc" : value;
});

console.log(json);


//2.JSON to Object
//parse(json)

console.clear();

const obj = JSON.parse(json,(key,value) =>{
    console.log(`key : ${key} , value: ${value}`);
    return key === "birthday" ? new Date(value) : value;
});

//console.log(obj);
//rabbit.jump();  //jump가 출력되지만 
//obj.jump();     //jump가 출력안된다

console.log(rabbit.birthday.getDate()); //실행됨
console.log(obj.birthday.getDate());    //에러



callback hell!!!!!!

'use strict';

//JavaScript is synchronous.
//Excute the code block by orger after hoisting.
//hoisting: var, function declaration 자동으로 맨위로 올라간다

//console.log(1);

//비동기적인
//setTimeout(() =>  console.log(2) ,1000);

//console.log(2);
//console.log(3);

//synchronous callback 즉각적인
function printImmediately(print){
    print();
}

printImmediately(()=> console.log(11));

//asynchronous callback 언제실행될지모르는
function printWithDelay(print,timeout){
    setTimeout(print, timeout);
}

printWithDelay(()=> console.log("async callback"),2000);




//Callback Hell Example

class UserStorage{
    loginUser(id,password,onSuccess,onError){
        setTimeout(()=>{
            if (
                (id === "ellie" && password === "dream") ||
                (id === "jc" && password === "jc")
            ){
                onSuccess(id);
            }else{
                onError(new Error("not found"));
            }
        },2000);
    }
    getRoles(user, onSuccess, onError){
        setTimeout(()=>{
            if (user === "ellie"){
                onSuccess({name : "ellie", role: "admin"});
            }else{
                onError(new Error("no access"));
            }
        },1000);
    }
}

const user = new UserStorage();


//읽기힘듬 이해힘듬

user.loginUser("ellie", "dream", (id) => {
    user.getRoles(id, (obj) => {
        console.log(`name:${obj.name} , role:${obj.role}`);
    }, (err) => {
        console.log(err);
    })
}, (err) => {
    console.log(err);
});

PROMISE
"use strict";

//Promise is a JavaScript object for asynchronous operation.
// state: pending -> fulfilled or rejected
// Producer vs Consumer

//1. Producer
//when new Promise is created, the executor runs automatically.
const promise = new Promise((resolve, reject) => {
  //doing some heavy work(newtwork , read files)

  console.log("doing comthing....");
  setTimeout(() => {
    resolve("elie");
    //reject(new Error("no network"));
  }, 2000);
});

//2. Consumer: then, catch, finally
promise
  .then((value) => {
    console.log(value);
  })
  .catch((error) => {
    console.log(error);
  })
  .finally(() => {
    console.log("finally");
  });

//3. Promise chaining
const fetchNumber = new Promise((resolve, reject) => {
  setTimeout(() => resolve(1), 1000);
});

fetchNumber
  .then((num) => num * 2)
  .then((num) => num * 3)
  .then((num) => {
    return new Promise((resolve, reject) => {
      setTimeout(() => resolve(num - 1), 1000);
    });
  })
  .then((num) => console.log(num));

//4. Error Handling
const getHen = () =>
  new Promise((resolve, recject) => {
    setTimeout(() => resolve("chicken"), 1000);
  });
const getEgg = (hen) =>
  new Promise((resolve, reject) => {
    setTimeout(() => reject(new Error(`error !! ${hen} => egg`)), 1000);
  });
const cook = (egg) =>
  new Promise((resolve, reject) => {
    setTimeout(() => resolve(`${egg} => food`), 1000);
  });
/*
getHen()
  .then((hen) => getEgg(hen))
  .then((egg) => cook(egg))
  .then((food) => console.log(food));
*/
getHen() //
  .then(getEgg)
  .catch((error) => "bread")
  .then(cook)
  .then(console.log)
  .catch(console.log);

CALLBACK HELL -> PROMISE
class UserStorage {
  loginUser(id, password) {
    return new Promise((resolve, reject) => {
      if (
        (id === "ellie" && password === "dream") ||
        (id === "jc" && password === "jc")
      ) {
        resolve(id);
      } else {
        reject(new Error("not found"));
      }
    }, 2000);
  }

  getRoles = (user) => {
    if (user === "ellie") {
      return new Promise((resolve, reject) => {
        setTimeout(() => resolve({ name: "ellie", role: "admin" }), 1000);
      });
    }
  };
}

const user = new UserStorage();

user //
  .loginUser("ellie", "dream")
  .then(user.getRoles)
  .then(console.log);

ASYNC & AWAIT
//async & await
//clear style of using promise :)

async function fetchUser() {
  return "ellie";
}

const user = fetchUser();
//console.log(user);

//2. await
function delay(ms) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}

async function getApple() {
  await delay(2000);
  return "apple";
}

async function getBanana() {
  await delay(1000);
  return "banana";
}

function getBananaPromise() {
  return delay(1000).then(() => "banana2");
}

function pickFruits() {
  return getApple().then((a) => {
    console.log("a : " + a);
    return getBanana().then((b) => {
      console.log("b ; " + b);
      return `${a} , ${b}`;
    });
  });
}

//console.log("pf :" + pickFruits().then(console.log));

async function asyncPickFruits() {
  const apple = await getApple();
  const banana = await getBanana();

  return `${apple} , ${banana}`;
}
//asyncPickFruits().then(console.log);
//위의 함수같은 경우 getApple에서 1초 딜레이 , getBanana에서 1초 딜레이 총 2초딜레이

//병렬화
async function parallelAsyncPickFruits() {
  const applePromise = getApple();
  const bananaPromise = getBanana();
  const apple = await applePromise;
  const banana = await bananaPromise;

  return `${apple} , ${banana}`;
}

//parallelAsyncPickFruits().then(console.log);

function pickAllFruits() {
  return Promise.all([getApple(), getBanana()]).then((fruits) => fruits.join());
}
//promise 배열을 보내면 결과를 배열로 줌

//pickAllFruits().then(console.log);

function pickOnlyOne() {
  return Promise.race([getApple(), getBanana()]);
}

pickOnlyOne().then(console.log);
