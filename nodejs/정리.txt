====console 함수
console.time("end"); //시간 측정용
console.log(); //로그용
console.error(); //에러로그용
console.table(); //테이블화로 보여줌
console.dir(); //객체를 콘솔에 표시할때 쓰임
console.trace(); //추적
console.timeEnd("end"); //시간 측정용 time 과 세트로 쓰임

====타이머
setTimeOut()
setInterval()
setImmediate()

clearTimeout()
clearInterval()
clearImmediate()

====filename , dirname 
console.log(__filename);
console.log(__dirname);

console->
/Users/fdevjc/Documents/Tutorial/nodejs/practice.js
/Users/fdevjc/Documents/Tutorial/nodejs

====module, exports, require
module.exports === exports  ====> true

====노드에서 this란
console.log(this);
console.log(this === exports);
console.log(this === module.exports);

function a() {
  console.log("function", this === exports, this === global);
}

a();

console->
{}
true
true
function false true

====process
현재 실행되고 있는 노드 프로세스에 대한 정보를 담고 있다.


====process.env
> process.env
process 정보 출력

==== process.nextTick()
process.nextTick()은 setImmediate나 setTimeOut보다 먼저 실행된다.
process.nextTick이나 promise를 마이크로태스크라고 따로 구분지어 부르기도 한다.

====process.extensions
실행중인 노드 프로세스를 종료합니다.

3.5 노드 내장 모듈 사용하기

3.5.1 os
const os = require("os");

console.log("운영체제 정보 --------------------");
console.log(os.arch());
console.log(os.platform());
console.log(os.type());
console.log(os.uptime());
console.log(os.hostname());
console.log(os.release());
console.log("경로 ---------------------------");
console.log(os.homedir());
console.log(os.tmpdir());
console.log("cpu 정보 -----------------------");
console.log(os.cpus());
console.log(os.cpus().length);
console.log("메모리 정보 ----------------------");
console.log(os.freemem());
console.log(os.totalmem());

3.5.2 path
const path = require("path");
console.log(path.sep);
console.log(path.posix.sep);
console.log(path.win32.sep);

3.5.3 url
인터넷주소를 쉽게 조작하도록 도와주는 모듈
url처리에는 크게 두가지 방식
노드7버전이후 WHATWG(웹표준을 정하는 단체의 이름) 방식
이전부터 노드에서 사용하던 방식의 url

3.5.4 querystring
WHATWG방식의 url대신 기존 노드의 url을 사용할 때, search부분을 사용하기 쉽게 객체로 만드는 모듈

3.5.5 crypto
다양한 방식의 암호화를 도와주는 모듈
3.5.5.1 단방향암호화
복호화 되지않음 (ex. SHA512)

3.5.5.2 양방향암호화
const crypto = require("crypto");

const algorithm = "aes-256-cbc";
const key = "abcdefghijklmnopqrstuvwxyz123456";
const iv = "1234567890123456";

const cipher = crypto.createCipheriv(algorithm, key, iv);
let result = cipher.update("암호화할 문장", "utf8", "base64");
result += cipher.final("base64");
console.log(result);

const decipher = crypto.createDecipheriv(algorithm, key, iv);
let result2 = decipher.update(result, "base64", "utf8");
result2 += decipher.final("utf8");
console.log(result2);


3.5.6 util
3.5.7 worker_threads
3.5.8 child_process

3.6 파일 시스템 접근
3.6.1 동기 메서드와 비동기 메서드
3.6.2 버퍼와 스트림 이해하기

<2021.02.02>
쿠키와 세션 이해하기
쿠키는 요청의 헤더에 담겨 전송됩니다.
브라우저는 응답의 헤더에 따라 쿠키를 저장합니다.
